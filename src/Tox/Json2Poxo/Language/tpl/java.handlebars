{{#with params}}{{#if package}}package {{package}};{{else}}package com.example;{{/if}}{{/with}}

import java.io.Serializable;
{{#if imports}}
{{imports}}

{{/if}}
{{#if params.includeGson}}
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.annotations.SerializedName;
import com.google.gson.annotations.Expose;

{{/if}}
public class {{name}} implements Serializable
{
{{#each properties}}
{{#if name}}
{{#if ../../params.includeGson}}
  private static final String FIELD_{{&nameUppercase}} = "{{&originalName}}";
{{/if}}
{{/if}}
{{/each}}
{{#each properties}}
{{#if name}}
{{#if ../../params.includeGson}}

  @Expose
  @SerializedName(FIELD_{{&nameUppercase}})
{{/if}}
  private {{&type}} {{&name}};
{{/if}}
{{/each}}

  public {{name}}() {
  }

{{#each properties}}
{{#if name}}
  public void set{{&nameCapitalized}}({{&type}} value) {
      this.{{&name}} = value;
  }

{{#if params.isBoolean}}
  public {{&type}} is{{&nameCapitalized}}() {
{{else}}
  public {{&type}} get{{&nameCapitalized}}() {
{{/if}}
      return this.{{&name}};
  }

{{/if}}
{{/each}}
{{#if primaryKey}}
  @Override
  public boolean equals(Object obj) {
      if (obj instanceof {{&name}}) {
          return (({{&name}}) obj).get{{&primaryKeyCapitalized}}().equals({{primaryKey}});
      }
      return false;
  }

  @Override
  public int hashCode(){
      return (({{primaryKeyType}}){{primaryKey}}).hashCode();
  }
{{/if}}
{{#if params.includeGson}}
  @Override
  public String toString() {
    Gson gson = new GsonBuilder().excludeFieldsWithoutExposeAnnotation().create();
    return gson.toJson(this);
  }
{{/if}}
}
