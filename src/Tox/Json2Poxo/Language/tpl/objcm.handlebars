//
//  {{name}}.m
//
//  Created by on {{today}}
//  Copyright (c) {{year}}. All rights reserved.
//

#import "{{name}}.h"
{{#if imports}}
{{imports}}

{{/if}}

// Original names
{{#each properties}}
  {{#if name}}
NSString * const k{{nameCapitalized}} = @"{{originalName}}";
  {{/if}}
{{/each}}

@interface {{name}} ()

- (id)objectOrNilForKey:(id)aKey fromDictionary:(NSDictionary *)dict;

@end

@implementation {{name}}

+ ({{name}} *)modelWithDictionary:(NSDictionary *)dict
{
  {{name}} *instance = [[{{name}} alloc] initWithDictionary:dict];
  return instance;
}

+ ({{name}} *)modelWithString:(NSString *)json
{
  {{name}} *instance = [[{{name}} alloc] initWithString:json];
  return instance;
}

- (instancetype)initWithString:(NSString *)json
{
  self = [super init];

  NSError *jsonError = nil;
  NSData *objectData = [json dataUsingEncoding:NSUTF8StringEncoding];
  NSDictionary *dict = [NSJSONSerialization JSONObjectWithData:objectData
                                      options:NSJSONReadingMutableContainers
                                        error:&jsonError];
  if (!jsonError)
    self = [self initWithDictionary:dict];

  return self;
}

- (instancetype)initWithDictionary:(NSDictionary *)dict
{
  self = [super init];

  if (self && [dict isKindOfClass:[NSDictionary class]])
  {
{{#each properties}}
{{#if params.isNumber}}
    self.{{name}} = [self objectOrNilForKey:k{{nameCapitalized}} fromDictionary:dict];
{{/if}}
{{#if params.isString}}
    self.{{name}} = [self objectOrNilForKey:k{{nameCapitalized}} fromDictionary:dict];
{{/if}}
{{#if params.isObject}}

    NSObject *obj{{nameCapitalized}} = [dict objectForKey:k{{nameCapitalized}}];
{{#if isArray}}    if ([obj{{nameCapitalized}} isKindOfClass:[NSArray class]])
    {
      NSMutableArray *list{{nameCapitalized}} = [NSMutableArray array];
      for (NSDictionary *item in (NSArray *)obj{{nameCapitalized}}) {
        if ([item isKindOfClass:[NSDictionary class]]) {
          [list{{nameCapitalized}} addObject:[{{nameCapitalized}} modelObjectWithDictionary:item]];
        }
      }
      self.{{name}} = list{{nameCapitalized}};
    }
{{else}}    if ([obj{{nameCapitalized}} isKindOfClass:[NSDictionary class]])
    {
      self.{{name}} = [{{nameCapitalized}} modelObjectWithDictionary:obj{{nameCapitalized}}];
    }
{{/if}}
{{/if}}
{{/each}}
  }
  return self;
}

- (NSDictionary *)dictionaryRepresentation
{
  NSMutableDictionary *mutableDict = [NSMutableDictionary dictionary];
{{#each properties}}
{{#if params.isNumber}}
  [mutableDict setValue:self.{{name}} forKey:k{{nameCapitalized}}];
{{/if}}
{{#if params.isString}}
  [mutableDict setValue:self.{{name}} forKey:k{{nameCapitalized}}];
{{/if}}
{{#if params.isObject}}
{{#if isArray}}  NSMutableArray *tempArray{{nameCapitalized}} = [NSMutableArray array];
  for (NSObject *subArray in self.{{name}}) {
    if ([subArray respondsToSelector:@selector(dictionaryRepresentation)]) {
       [tempArray{{nameCapitalized}} addObject:[subArray performSelector:@selector(dictionaryRepresentation)]];
    } else {
       [tempArray{{nameCapitalized}} addObject:subArray];
    }
  }
  [mutableDict setValue:[NSArray arrayWithArray:tempArray{{nameCapitalized}}] forKey:k{{nameCapitalized}}];
{{else}}  if ([self.{{name}} respondsToSelector:@selector(dictionaryRepresentation)]) {
    [mutableDict setValue:[self.{{name}} performSelector:@selector(dictionaryRepresentation)] forKey:k{{nameCapitalized}}];
  } else {
    [mutableDict setValue:self.{{name}} forKey:k{{nameCapitalized}}];
  }
{{/if}}
{{/if}}
{{/each}}

  return [NSDictionary dictionaryWithDictionary:mutableDict];
}

- (NSString *)description
{
  return [NSString stringWithFormat:@"%@", [self dictionaryRepresentation]];
}

#pragma mark - Helper Method
- (id)objectOrNilForKey:(id)aKey fromDictionary:(NSDictionary *)dict
{
  id object = [dict objectForKey:aKey];
  return [object isEqual:[NSNull null]] ? nil : object;
}

#pragma mark - NSCoding Methods

- (id)initWithCoder:(NSCoder *)aDecoder
{
  self = [super init];

{{#each properties}}
  self.{{name}} = [aDecoder decodeObjectForKey:k{{nameCapitalized}}];
{{/each}}

  return self;
}

- (void)encodeWithCoder:(NSCoder *)aCoder
{
{{#each properties}}
  [aCoder encodeObject:_{{name}} forKey:k{{nameCapitalized}}];
{{/each}}
}

- (id)copyWithZone:(NSZone *)zone
{
  {{name}} *copy = [[{{name}} alloc] init];
  if (copy)
  {
{{#each properties}}
    copy.{{name}} = [self.{{name}} copyWithZone:zone];
{{/each}}
  }

  return copy;
}

@end
