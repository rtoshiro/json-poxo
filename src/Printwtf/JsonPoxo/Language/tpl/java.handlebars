package {{params.package}};

import org.json.*;
import java.io.Serializable;
{{&imports}}

{{#params.includeGson}}
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.annotations.SerializedName;
import com.google.gson.annotations.Expose;

{{/params.includeGson}}
public class {{name}} implements Serializable
{
{{#properties}}
    private static final String FIELD_{{&nameUppercase}} = "{{&originalName}}";
{{/properties}}

{{#each properties}}
{{#../params.includeGson}}
    @Expose
    @SerializedName(FIELD_{{&nameUppercase}})
{{/../params.includeGson}}
{{#isArray}}
    private ArrayList<{{&type}}> {{&name}};
{{/isArray}}
{{^isArray}}
    private {{&type}} {{&name}};
{{/isArray}}
{{/each}}

    public {{name}}() {

    }

    public {{name}}(JSONObject jsonObject) {
        parseObject(jsonObject);
    }

    public {{name}}(String jsonString) {
        try {
            parseString(jsonString);
        } catch (JSONException e) {
            e.printStackTrace();
        }
    }

    protected void parseString(String jsonString) throws JSONException {
        JSONObject jsonObject = new JSONObject(jsonString);
        parseObject(jsonObject);
    }

    protected void parseObject(JSONObject object)
    {
{{#each properties}}
  {{#isArray}}

        if (object.optJSONArray(FIELD_{{&nameUppercase}}) != null)
        {
            this.{{&name}} = new ArrayList<>();
            JSONArray {{&name}}JsonArray = object.optJSONArray(FIELD_{{&nameUppercase}});
            for (int i = 0; i < {{&name}}JsonArray.length(); i++) {
    {{#isObject}}
                JSONObject {{&name}} = {{&name}}JsonArray.optJSONObject(i);
    {{/isObject}}
    {{^isObject}}
                {{&type}} {{&name}} = {{&name}}JsonArray.optJSON{{&type}}(i);
    {{/isObject}}
                this.{{&name}}.add(new {{&type}}({{&name}}));
            }
        }
  {{/isArray}}
  {{^isArray}}
    {{#isObject}}
        this.{{&name}} = new {{&type}}(object.optJSONObject(FIELD_{{&nameUppercase}}));
    {{/isObject}}
    {{^isObject}}
      {{#isNull}}
        this.{{&name}} = object.opt(FIELD_{{&nameUppercase}});
      {{/isNull}}
      {{^isNull}}
        this.{{&name}} = object.opt{{&type}}(FIELD_{{&nameUppercase}});
      {{/isNull}}
    {{/isObject}}
  {{/isArray}}
{{/each}}

    }

{{#each properties}}
    public void set{{&nameCapitalized}}({{&type}} value) {
        this.{{&name}} = value;
    }
{{#isBoolean}}

    public {{&type}} is{{&nameCapitalized}}() {
{{/isBoolean}}
{{^isBoolean}}

    public {{&type}} get{{&nameCapitalized}}() {
{{/isBoolean}}
        return this.{{&name}};
    }

{{/each}}
{{#if primaryKey}}

    @Override
    public boolean equals(Object obj) {
        if (obj instanceof {{&name}}) {
            return (({{&name}}) obj).get{{&primaryKeyCapitalized}}().equals({{primaryKey}});
        }
        return false;
    }

    @Override
    public int hashCode(){
        return (({{primaryKeyType}}){{primaryKey}}).hashCode();
    }
{{/if}}
{{#if params.includeGson}}

    @Override
    public String toString() {
      Gson gson = new GsonBuilder().excludeFieldsWithoutExposeAnnotation().create();
      return gson.toJson(this);
    }
{{/if}}
}
